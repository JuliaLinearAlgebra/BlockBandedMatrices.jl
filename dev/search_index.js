var documenterSearchIndex = {"docs":
[{"location":"#BlockBandedMatrices.jl-Documentation","page":"Home","title":"BlockBandedMatrices.jl Documentation","text":"","category":"section"},{"location":"#Creating-block-banded-and-banded-block-banded-matrices","page":"Home","title":"Creating block-banded and banded-block-banded matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BlockBandedMatrix\nBlockBandedMatrix(::AbstractMatrix, ::AbstractVector{Int}, ::AbstractVector{Int}, ::NTuple{2,Int})\nBlockBandedMatrix(::AbstractMatrix, ::NTuple{2,Int})\nBlockBandedMatrix{T}(::UndefInitializer, ::AbstractVector{Int}, ::AbstractVector{Int}, ::NTuple{2,Int})\nBandedBlockBandedMatrix\nBandedBlockBandedMatrix{T}(::UndefInitializer, ::AbstractVector{Int}, ::AbstractVector{Int}, ::NTuple{2,Int}, ::NTuple{2,Int})\nBlockSkylineMatrix","category":"page"},{"location":"#BlockBandedMatrices.BlockBandedMatrix","page":"Home","title":"BlockBandedMatrices.BlockBandedMatrix","text":"BlockBandedMatrix\n\nA BlockBandedMatrix is a subtype of BlockMatrix of BlockArrays.jl whose layout of non-zero blocks is banded.\n\n\n\n\n\n","category":"type"},{"location":"#BlockBandedMatrices.BlockBandedMatrix-Tuple{AbstractMatrix, AbstractVector{Int64}, AbstractVector{Int64}, Tuple{Int64, Int64}}","page":"Home","title":"BlockBandedMatrices.BlockBandedMatrix","text":"BlockBandedMatrix(A::Union{AbstractMatrix,UniformScaling},\n                    rows::AbstractVector{Int}, cols::AbstractVector{Int},\n                    (l,u)::NTuple{2,Int})\n\nReturn a sum(rows) × sum(cols) BlockBandedMatrix, with rows by cols blocks, with (l,u) as the block-bandwidth. The structural non-zero entries are equal to the corresponding indices of A.\n\nExamples\n\njulia> using LinearAlgebra, FillArrays\n\njulia> l,u = 0,1; # block bandwidths\n\njulia> nrowblk, ncolblk = 3, 3; # number of row/column blocks\n\njulia> rows = 1:nrowblk; cols = 1:ncolblk; # block sizes\n\njulia> BlockBandedMatrix(I, rows, cols, (l,u))\n3×3-blocked 6×6 BlockBandedMatrix{Bool}:\n 1  │  0  0  │  ⋅  ⋅  ⋅\n ───┼────────┼─────────\n ⋅  │  1  0  │  0  0  0\n ⋅  │  0  1  │  0  0  0\n ───┼────────┼─────────\n ⋅  │  ⋅  ⋅  │  1  0  0\n ⋅  │  ⋅  ⋅  │  0  1  0\n ⋅  │  ⋅  ⋅  │  0  0  1\n\njulia> BlockBandedMatrix(Ones(sum(rows),sum(cols)), rows, cols, (l,u))\n3×3-blocked 6×6 BlockBandedMatrix{Float64}:\n 1.0  │  1.0  1.0  │   ⋅    ⋅    ⋅\n ─────┼────────────┼───────────────\n  ⋅   │  1.0  1.0  │  1.0  1.0  1.0\n  ⋅   │  1.0  1.0  │  1.0  1.0  1.0\n ─────┼────────────┼───────────────\n  ⋅   │   ⋅    ⋅   │  1.0  1.0  1.0\n  ⋅   │   ⋅    ⋅   │  1.0  1.0  1.0\n  ⋅   │   ⋅    ⋅   │  1.0  1.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"#BlockBandedMatrices.BlockBandedMatrix-Tuple{AbstractMatrix, Tuple{Int64, Int64}}","page":"Home","title":"BlockBandedMatrices.BlockBandedMatrix","text":"BlockBandedMatrix(A::AbstractMatrix, (l,u)::NTuple{2,Int})\n\nReturn a BlockBandedMatrix with block-bandwidths (l,u), where the structural non-zero blocks correspond to those of A.\n\nExamples\n\njulia> using BlockArrays\n\njulia> B = BlockArray(ones(6,6), 1:3, 1:3);\n\njulia> BlockBandedMatrix(B, (1,1))\n3×3-blocked 6×6 BlockBandedMatrix{Float64}:\n 1.0  │  1.0  1.0  │   ⋅    ⋅    ⋅\n ─────┼────────────┼───────────────\n 1.0  │  1.0  1.0  │  1.0  1.0  1.0\n 1.0  │  1.0  1.0  │  1.0  1.0  1.0\n ─────┼────────────┼───────────────\n  ⋅   │  1.0  1.0  │  1.0  1.0  1.0\n  ⋅   │  1.0  1.0  │  1.0  1.0  1.0\n  ⋅   │  1.0  1.0  │  1.0  1.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"#BlockBandedMatrices.BlockBandedMatrix-Union{Tuple{T}, Tuple{UndefInitializer, AbstractVector{Int64}, AbstractVector{Int64}, Tuple{Int64, Int64}}} where T","page":"Home","title":"BlockBandedMatrices.BlockBandedMatrix","text":"BlockBandedMatrix{T}(undef, rows::AbstractVector{Int}, cols::AbstractVector{Int},\n                    (l,u)::NTuple{2,Int})\n\nReturn an unitialized sum(rows) × sum(cols) BlockBandedMatrix having eltype T, with rows by cols blocks and (l,u) as the block-bandwidth.\n\n\n\n\n\n","category":"method"},{"location":"#BlockBandedMatrices.BandedBlockBandedMatrix","page":"Home","title":"BlockBandedMatrices.BandedBlockBandedMatrix","text":"BandedBlockBandedMatrix(M::Union{UniformScaling,AbstractMatrix},\n                           rows, cols, (l, u), (λ, μ))\n\nReturn a sum(rows) × sum(cols) banded-block-banded matrix A, with block-bandwidths (l,u) and where A[Block(K,J)] is a BandedMatrix of size rows[K]×cols[J] with bandwidths (λ,μ). The structural non-zero elements of the returned matrix corresponds to those of M.\n\nExamples\n\njulia> using LinearAlgebra, FillArrays\n\njulia> BandedBlockBandedMatrix(I, [3,4,3], [3,4,3], (1,1), (1,1))\n3×3-blocked 10×10 BandedBlockBandedMatrix{Bool} with block-bandwidths (1, 1) and sub-block-bandwidths block-bandwidths (1, 1):\n 1  0  ⋅  │  0  0  ⋅  ⋅  │  ⋅  ⋅  ⋅\n 0  1  0  │  0  0  0  ⋅  │  ⋅  ⋅  ⋅\n ⋅  0  1  │  ⋅  0  0  0  │  ⋅  ⋅  ⋅\n ─────────┼──────────────┼─────────\n 0  0  ⋅  │  1  0  ⋅  ⋅  │  0  0  ⋅\n 0  0  0  │  0  1  0  ⋅  │  0  0  0\n ⋅  0  0  │  ⋅  0  1  0  │  ⋅  0  0\n ⋅  ⋅  0  │  ⋅  ⋅  0  1  │  ⋅  ⋅  0\n ─────────┼──────────────┼─────────\n ⋅  ⋅  ⋅  │  0  0  ⋅  ⋅  │  1  0  ⋅\n ⋅  ⋅  ⋅  │  0  0  0  ⋅  │  0  1  0\n ⋅  ⋅  ⋅  │  ⋅  0  0  0  │  ⋅  0  1\n\njulia> BandedBlockBandedMatrix(Ones{Int}(10,13), [3,4,3], [4,5,4], (1,1), (1,1))\n3×3-blocked 10×13 BandedBlockBandedMatrix{Int64} with block-bandwidths (1, 1) and sub-block-bandwidths block-bandwidths (1, 1):\n 1  1  ⋅  ⋅  │  1  1  ⋅  ⋅  ⋅  │  ⋅  ⋅  ⋅  ⋅\n 1  1  1  ⋅  │  1  1  1  ⋅  ⋅  │  ⋅  ⋅  ⋅  ⋅\n ⋅  1  1  1  │  ⋅  1  1  1  ⋅  │  ⋅  ⋅  ⋅  ⋅\n ────────────┼─────────────────┼────────────\n 1  1  ⋅  ⋅  │  1  1  ⋅  ⋅  ⋅  │  1  1  ⋅  ⋅\n 1  1  1  ⋅  │  1  1  1  ⋅  ⋅  │  1  1  1  ⋅\n ⋅  1  1  1  │  ⋅  1  1  1  ⋅  │  ⋅  1  1  1\n ⋅  ⋅  1  1  │  ⋅  ⋅  1  1  1  │  ⋅  ⋅  1  1\n ────────────┼─────────────────┼────────────\n ⋅  ⋅  ⋅  ⋅  │  1  1  ⋅  ⋅  ⋅  │  1  1  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  │  1  1  1  ⋅  ⋅  │  1  1  1  ⋅\n ⋅  ⋅  ⋅  ⋅  │  ⋅  1  1  1  ⋅  │  ⋅  1  1  1\n\n\n\n\n\n","category":"type"},{"location":"#BlockBandedMatrices.BandedBlockBandedMatrix-Union{Tuple{T}, Tuple{UndefInitializer, AbstractVector{Int64}, AbstractVector{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}} where T","page":"Home","title":"BlockBandedMatrices.BandedBlockBandedMatrix","text":"BandedBlockBandedMatrix{T}(undef, rows, cols, (l, u), (λ, μ))\n\nReturn an unitialized BandedBlockBandedMatrix having eltype T, with block-bandwidths (l,u) and where A[Block(K,J)] is a BandedMatrix{T} of size rows[K]×cols[J] with bandwidths (λ,μ).\n\n\n\n\n\n","category":"method"},{"location":"#BlockBandedMatrices.BlockSkylineMatrix","page":"Home","title":"BlockBandedMatrices.BlockSkylineMatrix","text":"BlockSkylineMatrix{T,LL,UU}(M::Union{UndefInitializer,UniformScaling,AbstractMatrix},\n                            rows, cols, (l::LL, u::UU))\n\nreturns a sum(rows)×sum(cols) block-banded matrix A having elements of type T, with block-bandwidths (l,u), and where A[Block(K,J)] is a Matrix{T} of size rows[K]×cols[J].\n\n(l,u) may be integers for constant bandwidths, or integer vectors of length length(cols) for ragged bands. In the latter case, l and u represent the number of sub and super-block-bands in each column.\n\nExamples\n\njulia> using LinearAlgebra, FillArrays\n\njulia> BlockSkylineMatrix(I, [2,2,2,4], [1,2,3], ([2,0,1],[0,1,1]))\n4×3-blocked 10×6 BlockSkylineMatrix{Bool, Vector{Bool}, BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}, BlockArrays.BlockedUnitRange{Vector{Int64}}}, Vector{Int64}, Vector{Int64}, BandedMatrices.BandedMatrix{Int64, Matrix{Int64}, Base.OneTo{Int64}}, Vector{Int64}}}:\n 1  │  0  0  │  ⋅  ⋅  ⋅\n 0  │  1  0  │  ⋅  ⋅  ⋅\n ───┼────────┼─────────\n 0  │  0  1  │  0  0  0\n 0  │  0  0  │  1  0  0\n ───┼────────┼─────────\n 0  │  ⋅  ⋅  │  0  1  0\n 0  │  ⋅  ⋅  │  0  0  1\n ───┼────────┼─────────\n ⋅  │  ⋅  ⋅  │  0  0  0\n ⋅  │  ⋅  ⋅  │  0  0  0\n ⋅  │  ⋅  ⋅  │  0  0  0\n ⋅  │  ⋅  ⋅  │  0  0  0\n\njulia> BlockSkylineMatrix(Ones(9,6), [2,3,4], [1,2,3], ([2,0,0],[0,1,1]))\n3×3-blocked 9×6 BlockSkylineMatrix{Float64, Vector{Float64}, BlockBandedMatrices.BlockSkylineSizes{Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}, BlockArrays.BlockedUnitRange{Vector{Int64}}}, Vector{Int64}, Vector{Int64}, BandedMatrices.BandedMatrix{Int64, Matrix{Int64}, Base.OneTo{Int64}}, Vector{Int64}}}:\n 1.0  │  1.0  1.0  │   ⋅    ⋅    ⋅\n 1.0  │  1.0  1.0  │   ⋅    ⋅    ⋅\n ─────┼────────────┼───────────────\n 1.0  │  1.0  1.0  │  1.0  1.0  1.0\n 1.0  │  1.0  1.0  │  1.0  1.0  1.0\n 1.0  │  1.0  1.0  │  1.0  1.0  1.0\n ─────┼────────────┼───────────────\n 1.0  │   ⋅    ⋅   │  1.0  1.0  1.0\n 1.0  │   ⋅    ⋅   │  1.0  1.0  1.0\n 1.0  │   ⋅    ⋅   │  1.0  1.0  1.0\n 1.0  │   ⋅    ⋅   │  1.0  1.0  1.0\n\n\n\n\n\n","category":"type"},{"location":"#Accessing-block-banded-and-banded-block-banded-matrices","page":"Home","title":"Accessing block-banded and banded-block-banded matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"isblockbanded\nblockbandwidths\nblockbandwidth\nBlockBandedMatrices.blockbandrange\nsubblockbandwidths\nsubblockbandwidth","category":"page"},{"location":"#BlockBandedMatrices.isblockbanded","page":"Home","title":"BlockBandedMatrices.isblockbanded","text":"isblockbanded(A)\n\nreturns true if a matrix implements the block banded interface.\n\n\n\n\n\n","category":"function"},{"location":"#BlockBandedMatrices.blockbandwidths","page":"Home","title":"BlockBandedMatrices.blockbandwidths","text":"blockbandwidths(A)\n\nReturns a tuple containing the upper and lower blockbandwidth of A.\n\n\n\n\n\n","category":"function"},{"location":"#BlockBandedMatrices.blockbandwidth","page":"Home","title":"BlockBandedMatrices.blockbandwidth","text":"blockbandwidth(A,i)\n\nReturns the lower blockbandwidth (i==1) or the upper blockbandwidth (i==2).\n\n\n\n\n\n","category":"function"},{"location":"#BlockBandedMatrices.blockbandrange","page":"Home","title":"BlockBandedMatrices.blockbandrange","text":"blockbandrange(A)\n\nReturns the range -blockbandwidth(A,1):blockbandwidth(A,2).\n\n\n\n\n\n","category":"function"},{"location":"#BlockBandedMatrices.subblockbandwidths","page":"Home","title":"BlockBandedMatrices.subblockbandwidths","text":"subblockbandwidths(A)\n\nreturns the sub-block bandwidths of A, where A is a banded-block-banded matrix. In other words, A[Block(K,J)] will return a BandedMatrix with bandwidths given by subblockbandwidths(A).\n\n\n\n\n\n","category":"function"},{"location":"#BlockBandedMatrices.subblockbandwidth","page":"Home","title":"BlockBandedMatrices.subblockbandwidth","text":"subblockbandwidth(A, i)\n\nreturns the sub-block lower (i == 1) or upper (i == 2) bandwidth of A, where A is a banded-block-banded matrix. In other words, A[Block(K,J)] will return a BandedMatrix with the returned lower/upper bandwidth.\n\n\n\n\n\n","category":"function"},{"location":"#Implementation","page":"Home","title":"Implementation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A BlockBandedMatrix stores the entries in a single vector, ordered by columns. For example, if A is a BlockBandedMatrix with block-bandwidths (A.l,A.u) == (1,0) and the block sizes fill(2, N) where N = 3 is the number of row and column blocks, then A has zero structure","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ a_11 a_12 │  ⋅    ⋅\n  a_21 a_22 │  ⋅    ⋅\n  ──────────┼──────────\n  a_31 a_32 │ a_33 a_34\n  a_41 a_42 │ a_43 a_44\n  ──────────┼──────────\n   ⋅    ⋅   │ a_53 a_54\n   ⋅    ⋅   │ a_63 a_64 ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"and is stored in memory via A.data as a single vector by columns, containing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[a_11,a_21,a_31,a_41,a_12,a_22,a_32,a_42,a_33,a_43,a_53,a_63,a_34,a_44,a_54,a_64]","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reasoning behind this storage scheme as that each block still satisfies the strided matrix interface, but we can also use BLAS and LAPACK to, for example, upper-triangularize a block column all at once.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A BandedBlockBandedMatrix stores the entries as a PseudoBlockMatrix, with the number of row blocks equal to A.l + A.u + 1, and the row block sizes are all A.μ + A.λ + 1. The column block sizes of the storage is the same as the the column block sizes of the BandedBlockBandedMatrix. This is a block-wise version of the storage of BandedMatrix.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example, if A is a BandedBlockBandedMatrix with block-bandwidths (A.l,A.u) == (1,0) and subblock-bandwidths (A.λ, A.μ) == (1,0), and the block sizes fill(2, N) where N = 3 is the number of row and column blocks, then A has zero structure","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ a_11  ⋅   │  ⋅    ⋅\n  a_21 a_22 │  ⋅    ⋅\n  ──────────┼──────────\n  a_31  ⋅   │ a_33  ⋅\n  a_41 a_42 │ a_43 a_44\n  ──────────┼──────────\n   ⋅    ⋅   │ a_53  ⋅\n   ⋅    ⋅   │ a_63 a_64 ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"and is stored in memory via A.data as a PseudoBlockMatrix, which has block sizes 2 x 2, containing entries:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[a_11 a_22 │ a_33 a_44\n a_21  ×   │ a_43  ×\n ──────────┼──────────\n a_31 a_42 │ a_53 a_64\n a_41  ×   │ a_63  ×   ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"where × is an entry in memory that is not used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reasoning behind this storage scheme as that each block still satisfies the banded matrix interface.","category":"page"},{"location":"#Layout","page":"Home","title":"Layout","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BlockBandedMatrices.AbstractBlockBandedLayout\nBlockBandedMatrices.AbstractBandedBlockBandedLayout","category":"page"},{"location":"#BlockBandedMatrices.AbstractBlockBandedLayout","page":"Home","title":"BlockBandedMatrices.AbstractBlockBandedLayout","text":"AbstractBlockBandedLayout\n\nisa a MemoryLayout that indicates that the array implements the block-banded interface.\n\n\n\n\n\n","category":"type"},{"location":"#BlockBandedMatrices.AbstractBandedBlockBandedLayout","page":"Home","title":"BlockBandedMatrices.AbstractBandedBlockBandedLayout","text":"AbstractBandedBlockBandedLayout\n\nisa a MemoryLayout that indicates that the array implements the banded-block-banded interface.\n\n\n\n\n\n","category":"type"}]
}
