var documenterSearchIndex = {"docs":
[{"location":"#BandedMatrices.jl-Documentation","page":"Home","title":"BandedMatrices.jl Documentation","text":"","category":"section"},{"location":"#Creating-block-banded-and-banded-block-banded-matrices","page":"Home","title":"Creating block-banded and banded-block-banded matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BlockBandedMatrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"BandedBlockBandedMatrix","category":"page"},{"location":"#BlockBandedMatrices.BandedBlockBandedMatrix","page":"Home","title":"BlockBandedMatrices.BandedBlockBandedMatrix","text":"BandedBlockBandedMatrix{T}(M::Union{UndefInitializer,UniformScaling,AbstractMatrix},\n                           rows, cols, (l, u), (λ, μ))\n\nreturns a sum(rows)×sum(cols) banded-block-banded matrix A of type T with block-bandwidths (l,u) and where A[Block(K,J)] is a BandedMatrix{T} of size rows[K]×cols[J] with bandwidths (λ,μ).\n\nExamples\n\njulia> BandedBlockBandedMatrix(I, [3,4,3], [3,4,3], (1,1), (1,1))\n3×3-blocked 10×10 BandedBlockBandedMatrix{Bool,BlockArrays.PseudoBlockArray{Bool,2,Array{Bool,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}:\n 1  0  ⋅  │  0  0  ⋅  ⋅  │  ⋅  ⋅  ⋅\n 0  1  0  │  0  0  0  ⋅  │  ⋅  ⋅  ⋅\n ⋅  0  1  │  ⋅  0  0  0  │  ⋅  ⋅  ⋅\n ─────────┼──────────────┼─────────\n 0  0  ⋅  │  1  0  ⋅  ⋅  │  0  0  ⋅\n 0  0  0  │  0  1  0  ⋅  │  0  0  0\n ⋅  0  0  │  ⋅  0  1  0  │  ⋅  0  0\n ⋅  ⋅  0  │  ⋅  ⋅  0  1  │  ⋅  ⋅  0\n ─────────┼──────────────┼─────────\n ⋅  ⋅  ⋅  │  0  0  ⋅  ⋅  │  1  0  ⋅\n ⋅  ⋅  ⋅  │  0  0  0  ⋅  │  0  1  0\n ⋅  ⋅  ⋅  │  ⋅  0  0  0  │  ⋅  0  1\n\njulia> BandedBlockBandedMatrix(Ones{Int}(10,13), [3,4,3], [4,5,4], (1,1), (1,1))\n3×3-blocked 10×13 BandedBlockBandedMatrix{Int64,BlockArrays.PseudoBlockArray{Int64,2,Array{Int64,2},Tuple{BlockArrays.BlockedUnitRange{Array{Int64,1}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}},BlockArrays.BlockedUnitRange{Array{Int64,1}}}:\n 1  1  ⋅  ⋅  │  1  1  ⋅  ⋅  ⋅  │  ⋅  ⋅  ⋅  ⋅\n 1  1  1  ⋅  │  1  1  1  ⋅  ⋅  │  ⋅  ⋅  ⋅  ⋅\n ⋅  1  1  1  │  ⋅  1  1  1  ⋅  │  ⋅  ⋅  ⋅  ⋅\n ────────────┼─────────────────┼────────────\n 1  1  ⋅  ⋅  │  1  1  ⋅  ⋅  ⋅  │  1  1  ⋅  ⋅\n 1  1  1  ⋅  │  1  1  1  ⋅  ⋅  │  1  1  1  ⋅\n ⋅  1  1  1  │  ⋅  1  1  1  ⋅  │  ⋅  1  1  1\n ⋅  ⋅  1  1  │  ⋅  ⋅  1  1  1  │  ⋅  ⋅  1  1\n ────────────┼─────────────────┼────────────\n ⋅  ⋅  ⋅  ⋅  │  1  1  ⋅  ⋅  ⋅  │  1  1  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  │  1  1  1  ⋅  ⋅  │  1  1  1  ⋅\n ⋅  ⋅  ⋅  ⋅  │  ⋅  1  1  1  ⋅  │  ⋅  1  1  1\n\n\n\n\n\n","category":"type"},{"location":"#Accessing-block-banded-and-banded-block-banded-matrices","page":"Home","title":"Accessing block-banded and banded-block-banded matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"blockbandwidths","category":"page"},{"location":"#BlockBandedMatrices.blockbandwidths","page":"Home","title":"BlockBandedMatrices.blockbandwidths","text":"blockbandwidths(A)\n\nReturns a tuple containing the upper and lower blockbandwidth of A.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"blockbandwidth","category":"page"},{"location":"#BlockBandedMatrices.blockbandwidth","page":"Home","title":"BlockBandedMatrices.blockbandwidth","text":"blockbandwidth(A,i)\n\nReturns the lower blockbandwidth (i==1) or the upper blockbandwidth (i==2).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"subblockbandwidths","category":"page"},{"location":"#BlockBandedMatrices.subblockbandwidths","page":"Home","title":"BlockBandedMatrices.subblockbandwidths","text":"subblockbandwidths(A)\n\nreturns the sub-block bandwidths of A, where A is a banded-block-banded matrix. In other words, A[Block(K,J)] will return a BandedMatrix with bandwidths given by subblockbandwidths(A).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"subblockbandwidth","category":"page"},{"location":"#BlockBandedMatrices.subblockbandwidth","page":"Home","title":"BlockBandedMatrices.subblockbandwidth","text":"subblockbandwidth(A, i)\n\nreturns the sub-block lower (i == 1) or upper (i == 2) bandwidth of A, where A is a banded-block-banded matrix. In other words, A[Block(K,J)] will return a BandedMatrix with the returned lower/upper bandwidth.\n\n\n\n\n\n","category":"function"},{"location":"#Implementation","page":"Home","title":"Implementation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A BlockBandedMatrix stores the entries in a single vector, ordered by columns. For example, if A is a BlockBandedMatrix with block-bandwidths (A.l,A.u) == (1,0) and the block sizes fill(2, N) where N = 3 is the number of row and column blocks, then A has zero structure","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ a_11 a_12 │  ⋅    ⋅\n  a_21 a_22 │  ⋅    ⋅\n  ──────────┼──────────\n  a_31 a_32 │ a_33 a_34\n  a_41 a_42 │ a_43 a_44  \n  ──────────┼──────────\n   ⋅    ⋅   │ a_53 a_54\n   ⋅    ⋅   │ a_63 a_64 ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"and is stored in memory via A.data as a single vector by columns, containing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[a_11,a_21,a_31,a_41,a_12,a_22,a_32,a_42,a_33,a_43,a_53,a_63,a_34,a_44,a_54,a_64]","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reasoning behind this storage scheme as that each block still satisfies the strided matrix interface, but we can also use BLAS and LAPACK to, for example, upper-triangularize a block column all at once.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A BandedBlockBandedMatrix stores the entries as a PseudoBlockMatrix, with the number of row blocks equal to A.l + A.u + 1, and the row block sizes are all A.μ + A.λ + 1. The column block sizes of the storage is the same as the the column block sizes of the BandedBlockBandedMatrix. This is a block-wise version of the storage of BandedMatrix.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example, if A is a BandedBlockBandedMatrix with block-bandwidths (A.l,A.u) == (1,0) and subblock-bandwidths (A.λ, A.μ) == (1,0), and the block sizes fill(2, N) where N = 3 is the number of row and column blocks, then A has zero structure","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ a_11  ⋅   │  ⋅    ⋅\n  a_21 a_22 │  ⋅    ⋅\n  ──────────┼──────────\n  a_31  ⋅   │ a_33  ⋅\n  a_41 a_42 │ a_43 a_44  \n  ──────────┼──────────\n   ⋅    ⋅   │ a_53  ⋅\n   ⋅    ⋅   │ a_63 a_64 ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"and is stored in memory via A.data as a PseudoBlockMatrix, which has block sizes 2 x 2, containing entries:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[a_11 a_22 │ a_33 a_44\n a_21  ×   │ a_43  ×  \n ──────────┼──────────\n a_31 a_42 │ a_53 a_64\n a_41  ×   │ a_63  ×   ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"where × is an entry in memory that is not used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reasoning behind this storage scheme as that each block still satisfies the banded matrix interface.","category":"page"}]
}
